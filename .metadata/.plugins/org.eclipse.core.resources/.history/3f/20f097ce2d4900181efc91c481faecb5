package com.dipta.project.utility.queue;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;
import java.util.concurrent.ThreadPoolExecutor;

import com.dipta.project.scheduler.JobDiscoverer;
import com.dipta.project.utility.queue.jobcategory.ProjectExecutionQueueJob;

public class QueueManager {
	
	public static final int MAX_CONCURRENCY = 10;
	private ExecutorService executor = null;
	
	public QueueManager() {
		executor = Executors.newFixedThreadPool(1);
	}
	public QueueManager(int numberOfConcurrency) {
		if(MAX_CONCURRENCY>numberOfConcurrency)
			executor = Executors.newFixedThreadPool(numberOfConcurrency);
		else
			executor = Executors.newFixedThreadPool(MAX_CONCURRENCY);
	}
	
//	public  int  getProjectOrder(Long projectId){
//		ThreadPoolExecutor tpe = (ThreadPoolExecutor)executor;
//		FutureTask[] task= tpe.getQueue().toArray(new FutureTask[tpe.getQueue().size()]);
//		for(int i=0;i<task.length;i++){
//			 ProjectExecutionQueueJob realTask = (ProjectExecutionQueueJob)JobDiscoverer.findRealTask( task[i]);						 
//		      if(realTask.getData()[1].equals(projectId)){
//		    	  return (i+1);
//		      };
//		 }
//		return 0;
//	}
	public Future<?> submitJob(RunnableQueueJob job){
		return executor.submit(job);
	}
	public <T> Future<T> submitJob(CallableQueueJob<T> job){
		return (Future<T>)executor.submit(job);
//		return null;
	}
	
	public final boolean executeAJob(RunnableQueueJob job){
		executor.execute(job);
		return true;
	}
	
	public final boolean noMoreJobs(){
		executor.shutdown();
		return true;
	}
	
	public final boolean forceStop(){
		executor.shutdownNow();
		return true;
	}
}
