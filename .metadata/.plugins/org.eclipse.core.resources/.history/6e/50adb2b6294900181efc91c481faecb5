package com.lei.utility.queue.jobcategory;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.io.FilenameUtils;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.springframework.beans.PropertyAccessor;
import org.springframework.beans.PropertyAccessorFactory;
import org.springframework.web.multipart.MultipartFile;

import com.lei.dto.file.FileDataDTO;
import com.lei.dto.file.FileDto;
import com.lei.exception.common.InvalidFileException;
import com.lei.exception.common.InvalidSourceFileTemplate;
import com.lei.exception.common.ObjectNotSupportedException;
import com.lei.exception.common.ProcessFailedException;
import com.lei.exception.file.FileIdNotSupportedException;
import com.lei.exception.file.FormatNotSupportedException;
import com.lei.maintenance.file.FileMaintenanceImpl;
import com.lei.maintenance.file.IFileMaintenance;
import com.lei.maintenance.project.IProjectMaintenance;
import com.lei.maintenance.project.ProjectMaintenanceImpl;
import com.lei.utility.constants.StatusConstants;
import com.lei.utility.excelutility.FileDataListener;
import com.lei.utility.excelutility.ReadExcel;
import com.lei.utility.queue.RunnableQueueJob;

/**
 * 
 * @author saurabh.agarwal
 *
 */
public class FileParser extends RunnableQueueJob implements FileDataListener{

//	private Long rowsCount = 0L;
	private IProjectMaintenance projectMaintenance = null;
	private IFileMaintenance fileMaintenance = null;
	private String userID;
	private Long projectID;
	private Long fileId;
	private String source;
	private List<FileDataDTO> fileDataList;
	
	private FileDto fileDto;

	public FileParser(String userID,Long projectID,Long fileId,String source, FileDto fileDto){
		super(userID,projectID,fileId,source, fileDto);
	}
	
	public FileParser(String userID,Long projectID,String source, FileDto fileDto){
		this.userID = userID;
		this.projectID=projectID;
		this.source=source;
		
	}


	@Override
	public boolean execute(Object[] userData) throws ProcessFailedException{
		userID	= (String)userData[0];
		projectID	= (Long)userData[1];
		fileId		= (Long)userData[2];
		source		= (String)userData[3];
		fileDto  =  (FileDto)userData[4];
		
		if(fileDto==null){
			
		}
		
		fileDto.setSourceType(source);
		

		FileDto fileDetails = null;
		String fileExtension = null;
		String filePath = null;
		try{
			fileMaintenance = new FileMaintenanceImpl();
			fileDetails = fileMaintenance.getFileDetails(userID,fileId);
			fileExtension = fileDetails.getExtension();
			filePath = fileDetails.getFileLocation()+fileDetails.getId();

			if(fileExtension!=null && fileExtension.equalsIgnoreCase("XLS") || fileExtension.equalsIgnoreCase("XLSX") ){
				projectMaintenance = new ProjectMaintenanceImpl();
				fileDataList = new ArrayList<>();

				fileMaintenance.updateFileStatus(userID,fileId, StatusConstants.PROCESSING.getID());
				
				// ---- OBSOLETE CODE ----------
				//ReadExcel excelReader = new ReadExcel(this);
				//excelReader.readExcel(filePath);
				//------------------------------
				
				finish();
			}
		}catch(FileIdNotSupportedException|ProcessFailedException | InvalidFileException e){
			fileMaintenance.updateFileStatus(userID,fileId, StatusConstants.FAILED.getID());
			throw new ProcessFailedException("File execution failed for File ID:"+fileId);
		}
		
		// ---- OBSOLETE CODE ----------
		/*catch(FileIdNotSupportedException|ProcessFailedException|InvalidFormatException|IOException|InvalidFileException e){
			fileMaintenance.updateFileStatus(userID,fileId, StatusConstants.FAILED.getID());
			throw new ProcessFailedException("File execution failed for File ID:"+fileId);
		}*/
		//------------------------------
		return true;
	}

	
	
	
	@Override
	public boolean validateFileTemplate(MultipartFile file) throws ProcessFailedException, FormatNotSupportedException{

		
		String fileExtension = FilenameUtils.getExtension(file.getOriginalFilename());
		try{
			if(fileExtension!=null && fileExtension.equalsIgnoreCase("XLS") || fileExtension.equalsIgnoreCase("XLSX") ){
				fileDataList = new ArrayList<>();
				ReadExcel excelReader = new ReadExcel(this);
				excelReader.validateExcelTemplate(file);
				return validateData();
			}else{
				return false;
			}
		}catch(ProcessFailedException|InvalidFormatException|IOException|InvalidFileException e){
	//	catch(InvalidFileException e){
			throw new ProcessFailedException("File could not be uploaded - "+e.getMessage());
		}
		//return true;
	}
	
	

	@Override
	public void gotData(List<String> rowData) {
//		rowsCount++;

		
		if(rowData!=null&& rowData.size()>0 && rowData.get(0)!=null && rowData.get(0).length()>0){
			FileDataDTO fileData = new FileDataDTO();
			PropertyAccessor access  = PropertyAccessorFactory.forDirectFieldAccess(fileData);
			for(int index = 0; index<rowData.size()&&index<6;index++){
				access.setPropertyValue("f"+index, rowData.get(index));
				/*if(index==0){
					fileData.setId(rowData.get(0));
				}else if(index==1){
					fileData.setLegalName(rowData.get(1));
				}else if(index==2){
					fileData.setCountry(rowData.get(2));
				}else if(index==3){
					fileData.setIsin(rowData.get(3));
				}else if(index==4){
					fileData.setSedol(rowData.get(4));
				}else if(index==5){
					fileData.setCusip(rowData.get(5));
				} */
			}
			fileDataList.add(fileData);
		}
		/*
		
		if(rowData!=null && rowData.size()>2){
			fileData.setId(rowData.get(0));
			fileData.setLegalName(rowData.get(1));
			fileData.setCountry(rowData.get(2));
			if(rowData.size()>=6){
				fileData.setIsin(rowData.get(3));
				fileData.setSedol(rowData.get(4));
				fileData.setCusip(rowData.get(5));
			}
			fileDataList.add(fileData);
		}else{
			
		}

		fileDataList.add(fileData);*/
	}


	@Override
	public void finish() throws InvalidFileException {
		try {
		//	if(validateData()){
				
				//fileMaintenance.updateFilePercentage(userID, fileId, 50, (int) fileDto.getStatusId());
				
				fileMaintenance.uploadeFileSqlldrGeneric(userID, projectID, fileDto);
				
				
				
				//projectMaintenance.saveFileData(userID,projectID,fileId,fileDataList);
				
			
				
				
				
				
		//	}
		} catch (ProcessFailedException | ObjectNotSupportedException | InvalidFormatException | IOException e) {
			System.out.println("Unable to load data record :"+e);
			try {
				fileMaintenance.updateFileStatus(userID,fileId, StatusConstants.FAILED.getID());
			} catch (ProcessFailedException e1) {
				System.out.println("Unable to load data record :"+e);
			}
		} catch (InvalidSourceFileTemplate e) {
			System.out.println("Unable to load data record :"+e);
			try {
				fileMaintenance.updateFileStatus(userID,fileId, StatusConstants.FAILED.getID());
			} catch (ProcessFailedException e1) {
				System.out.println("Unable to load data record :"+e);
			}
		} 

	}


	@Override
	public void skippedData(List<String> rowData) throws ProcessFailedException {
		if(source!=null){
			if(source.equalsIgnoreCase("counterparty")){
				if(rowData==null || rowData.size()!=3){
					throw new ProcessFailedException("Process failed due to invalid file template.");
				}
			}else if(source.equalsIgnoreCase("security")){
				if(rowData==null || rowData.size()!=6){
					throw new ProcessFailedException("Process failed due to invalid file template.");
				}
			}
		}else{
			throw new ProcessFailedException("File processing failed due to unavailability of Source.");
		}

	}
	
	@Override
	public boolean validateData() throws InvalidFileException {
		if(fileDataList==null ||fileDataList.size()==0){
				throw new InvalidFileException("File does't contain any records");
		}
		return true;
	}

}
