package com.dipta.project.utility;



import java.io.File;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.dipta.project.dto.ticketManagement.KeyValueObject;
import com.dipta.project.exception.ticket.XmlLoaderException;
import com.dipta.project.utility.constants.ApplicationConstants;


public class TicketConfigurationLoader {
	
	private final String SERVETXPATH="/cdi/ticket-management/server";
	private Map<String,List<KeyValueObject>> configMap=new HashMap<String,List<KeyValueObject>>();
	private static TicketConfigurationLoader ticketConfigurationLoader;
	private final String SERVER_KEY="server";
	private Document doc;
	
	private TicketConfigurationLoader(){
		
	}
	
	public static  TicketConfigurationLoader getInstance() throws XmlLoaderException{
		if(ticketConfigurationLoader==null){
			ticketConfigurationLoader=new TicketConfigurationLoader();
			ticketConfigurationLoader.init();
		}
		return ticketConfigurationLoader;
	}
	
	private void init() throws XmlLoaderException{
		try {
			String FILENAME = File.separator + PropertyUtility.getValueString(ApplicationConstants.APPLICATION_BUNDLE.getValue(), "TICKET_CONFIGURATION_FILE");
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(TicketConfigurationLoader.class.getClassLoader().getResourceAsStream(FILENAME));
			doc.getDocumentElement().normalize();
		} catch (Exception e) {
			e.printStackTrace();
		    throw new  XmlLoaderException();
		}
	}

	 
	public  List<KeyValueObject>  getServiceConfig(String processType) throws XmlLoaderException{
		String processExpression = createXPATH(processType);
		List<KeyValueObject> processConfigMap = fetchXMLConfig(processExpression);
		return processConfigMap;
	}
	
	private String createXPATH(String processType){
		String[] process=processType.split("_");
		String processExpression = "/cdi/ticket-management/"+process[0]+"/process[@type='"+ process[1] + "']";
		return processExpression;
	}
	
	
	public  List<KeyValueObject> getServerConfig() throws XmlLoaderException {
		if(configMap.get(SERVER_KEY) != null){
			return configMap.get(SERVER_KEY); 
		}
		List<KeyValueObject>  serverConfigList = fetchXMLConfig(SERVETXPATH);
		return serverConfigList;
	}
	
/**
 * 
 * @param expression
 * @return
 */
	private List<KeyValueObject> fetchXMLConfig(String expression) throws XmlLoaderException{
		if(configMap.get(expression) != null){
			return configMap.get(expression); 
		}
		List<KeyValueObject> ticketConfiguration = new  LinkedList<KeyValueObject>();
		try {
			NodeList nodeList;
			XPath xPath = XPathFactory.newInstance().newXPath();
			Node node = (Node) xPath.compile(expression).evaluate(doc,XPathConstants.NODE);
			if (null != node) {
				nodeList = node.getChildNodes();
				for (int i = 0; null != nodeList && i < nodeList.getLength(); i++) {
					Node nod = nodeList.item(i);
					if (nod.getNodeType() == Node.ELEMENT_NODE){
						boolean modifiable = nod.getAttributes().getNamedItem("modify") !=null ? (nod.getAttributes().getNamedItem("modify").getNodeValue()).equalsIgnoreCase("true")?true:false:false;
						if(modifiable){
							ticketConfiguration.add(new KeyValueObject(nodeList.item(i).getNodeName(),nod.getFirstChild().getNodeValue(),modifiable,nod.getAttributes().getNamedItem("class").getNodeValue()));
						}else{
							ticketConfiguration.add(new KeyValueObject(nodeList.item(i).getNodeName(),nod.getFirstChild().getNodeValue(),modifiable,null));
						}
					}
				}
			}
		} catch (XPathExpressionException e) {
			e.printStackTrace();
			throw new  XmlLoaderException();
		}
		configMap.put(expression, ticketConfiguration);
		return ticketConfiguration;
	}

}